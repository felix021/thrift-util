// Code generated by thriftgo (0.2.12). DO NOT EDIT.

package test

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type EnumType int64

const (
	EnumType_A EnumType = 1
	EnumType_B EnumType = 2
)

func (p EnumType) String() string {
	switch p {
	case EnumType_A:
		return "A"
	case EnumType_B:
		return "B"
	}
	return "<UNSET>"
}

func EnumTypeFromString(s string) (EnumType, error) {
	switch s {
	case "A":
		return EnumType_A, nil
	case "B":
		return EnumType_B, nil
	}
	return EnumType(0), fmt.Errorf("not a valid EnumType string")
}

func EnumTypePtr(v EnumType) *EnumType { return &v }
func (p *EnumType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = EnumType(result.Int64)
	return
}

func (p *EnumType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type Demo struct {
	Bool1          *bool             `thrift:"bool1,1,optional" frugal:"1,optional,bool" json:"bool1,omitempty"`
	Double1        *float64          `thrift:"double1,2,optional" frugal:"2,optional,double" json:"double1,omitempty"`
	Byte1          *int8             `thrift:"byte1,3,optional" frugal:"3,optional,byte" json:"byte1,omitempty"`
	Int16          *int16            `thrift:"int16,4,optional" frugal:"4,optional,i16" json:"int16,omitempty"`
	Int32          *int32            `thrift:"int32,5,optional" frugal:"5,optional,i32" json:"int32,omitempty"`
	Int64          *int64            `thrift:"int64,6,optional" frugal:"6,optional,i64" json:"int64,omitempty"`
	String1        *string           `thrift:"string1,7,optional" frugal:"7,optional,string" json:"string1,omitempty"`
	StructDemo     *Demo             `thrift:"struct_demo,8,optional" frugal:"8,optional,Demo" json:"struct_demo,omitempty"`
	MapStringInt32 map[string]int32  `thrift:"map_string_int32,9,optional" frugal:"9,optional,map<string:i32>" json:"map_string_int32,omitempty"`
	MapStringDemo  map[string]*Demo  `thrift:"map_string_demo,10,optional" frugal:"10,optional,map<string:Demo>" json:"map_string_demo,omitempty"`
	SetByte        []int8            `thrift:"set_byte,11,optional" frugal:"11,optional,set<byte>" json:"set_byte,omitempty"`
	SetI32         []int32           `thrift:"set_i32,12,optional" frugal:"12,optional,set<i32>" json:"set_i32,omitempty"`
	ListByte       []int8            `thrift:"list_byte,13,optional" frugal:"13,optional,list<byte>" json:"list_byte,omitempty"`
	ListString     []string          `thrift:"list_string,14,optional" frugal:"14,optional,list<string>" json:"list_string,omitempty"`
	ListMapDemo    []map[int64]*Demo `thrift:"list_map_demo,15,optional" frugal:"15,optional,list<map<i64:Demo>>" json:"list_map_demo,omitempty"`
	Enum1          *EnumType         `thrift:"enum1,16,optional" frugal:"16,optional,EnumType" json:"enum1,omitempty"`
}

func NewDemo() *Demo {
	return &Demo{}
}

func (p *Demo) InitDefault() {
	*p = Demo{}
}

var Demo_Bool1_DEFAULT bool

func (p *Demo) GetBool1() (v bool) {
	if !p.IsSetBool1() {
		return Demo_Bool1_DEFAULT
	}
	return *p.Bool1
}

var Demo_Double1_DEFAULT float64

func (p *Demo) GetDouble1() (v float64) {
	if !p.IsSetDouble1() {
		return Demo_Double1_DEFAULT
	}
	return *p.Double1
}

var Demo_Byte1_DEFAULT int8

func (p *Demo) GetByte1() (v int8) {
	if !p.IsSetByte1() {
		return Demo_Byte1_DEFAULT
	}
	return *p.Byte1
}

var Demo_Int16_DEFAULT int16

func (p *Demo) GetInt16() (v int16) {
	if !p.IsSetInt16() {
		return Demo_Int16_DEFAULT
	}
	return *p.Int16
}

var Demo_Int32_DEFAULT int32

func (p *Demo) GetInt32() (v int32) {
	if !p.IsSetInt32() {
		return Demo_Int32_DEFAULT
	}
	return *p.Int32
}

var Demo_Int64_DEFAULT int64

func (p *Demo) GetInt64() (v int64) {
	if !p.IsSetInt64() {
		return Demo_Int64_DEFAULT
	}
	return *p.Int64
}

var Demo_String1_DEFAULT string

func (p *Demo) GetString1() (v string) {
	if !p.IsSetString1() {
		return Demo_String1_DEFAULT
	}
	return *p.String1
}

var Demo_StructDemo_DEFAULT *Demo

func (p *Demo) GetStructDemo() (v *Demo) {
	if !p.IsSetStructDemo() {
		return Demo_StructDemo_DEFAULT
	}
	return p.StructDemo
}

var Demo_MapStringInt32_DEFAULT map[string]int32

func (p *Demo) GetMapStringInt32() (v map[string]int32) {
	if !p.IsSetMapStringInt32() {
		return Demo_MapStringInt32_DEFAULT
	}
	return p.MapStringInt32
}

var Demo_MapStringDemo_DEFAULT map[string]*Demo

func (p *Demo) GetMapStringDemo() (v map[string]*Demo) {
	if !p.IsSetMapStringDemo() {
		return Demo_MapStringDemo_DEFAULT
	}
	return p.MapStringDemo
}

var Demo_SetByte_DEFAULT []int8

func (p *Demo) GetSetByte() (v []int8) {
	if !p.IsSetSetByte() {
		return Demo_SetByte_DEFAULT
	}
	return p.SetByte
}

var Demo_SetI32_DEFAULT []int32

func (p *Demo) GetSetI32() (v []int32) {
	if !p.IsSetSetI32() {
		return Demo_SetI32_DEFAULT
	}
	return p.SetI32
}

var Demo_ListByte_DEFAULT []int8

func (p *Demo) GetListByte() (v []int8) {
	if !p.IsSetListByte() {
		return Demo_ListByte_DEFAULT
	}
	return p.ListByte
}

var Demo_ListString_DEFAULT []string

func (p *Demo) GetListString() (v []string) {
	if !p.IsSetListString() {
		return Demo_ListString_DEFAULT
	}
	return p.ListString
}

var Demo_ListMapDemo_DEFAULT []map[int64]*Demo

func (p *Demo) GetListMapDemo() (v []map[int64]*Demo) {
	if !p.IsSetListMapDemo() {
		return Demo_ListMapDemo_DEFAULT
	}
	return p.ListMapDemo
}

var Demo_Enum1_DEFAULT EnumType

func (p *Demo) GetEnum1() (v EnumType) {
	if !p.IsSetEnum1() {
		return Demo_Enum1_DEFAULT
	}
	return *p.Enum1
}
func (p *Demo) SetBool1(val *bool) {
	p.Bool1 = val
}
func (p *Demo) SetDouble1(val *float64) {
	p.Double1 = val
}
func (p *Demo) SetByte1(val *int8) {
	p.Byte1 = val
}
func (p *Demo) SetInt16(val *int16) {
	p.Int16 = val
}
func (p *Demo) SetInt32(val *int32) {
	p.Int32 = val
}
func (p *Demo) SetInt64(val *int64) {
	p.Int64 = val
}
func (p *Demo) SetString1(val *string) {
	p.String1 = val
}
func (p *Demo) SetStructDemo(val *Demo) {
	p.StructDemo = val
}
func (p *Demo) SetMapStringInt32(val map[string]int32) {
	p.MapStringInt32 = val
}
func (p *Demo) SetMapStringDemo(val map[string]*Demo) {
	p.MapStringDemo = val
}
func (p *Demo) SetSetByte(val []int8) {
	p.SetByte = val
}
func (p *Demo) SetSetI32(val []int32) {
	p.SetI32 = val
}
func (p *Demo) SetListByte(val []int8) {
	p.ListByte = val
}
func (p *Demo) SetListString(val []string) {
	p.ListString = val
}
func (p *Demo) SetListMapDemo(val []map[int64]*Demo) {
	p.ListMapDemo = val
}
func (p *Demo) SetEnum1(val *EnumType) {
	p.Enum1 = val
}

var fieldIDToName_Demo = map[int16]string{
	1:  "bool1",
	2:  "double1",
	3:  "byte1",
	4:  "int16",
	5:  "int32",
	6:  "int64",
	7:  "string1",
	8:  "struct_demo",
	9:  "map_string_int32",
	10: "map_string_demo",
	11: "set_byte",
	12: "set_i32",
	13: "list_byte",
	14: "list_string",
	15: "list_map_demo",
	16: "enum1",
}

func (p *Demo) IsSetBool1() bool {
	return p.Bool1 != nil
}

func (p *Demo) IsSetDouble1() bool {
	return p.Double1 != nil
}

func (p *Demo) IsSetByte1() bool {
	return p.Byte1 != nil
}

func (p *Demo) IsSetInt16() bool {
	return p.Int16 != nil
}

func (p *Demo) IsSetInt32() bool {
	return p.Int32 != nil
}

func (p *Demo) IsSetInt64() bool {
	return p.Int64 != nil
}

func (p *Demo) IsSetString1() bool {
	return p.String1 != nil
}

func (p *Demo) IsSetStructDemo() bool {
	return p.StructDemo != nil
}

func (p *Demo) IsSetMapStringInt32() bool {
	return p.MapStringInt32 != nil
}

func (p *Demo) IsSetMapStringDemo() bool {
	return p.MapStringDemo != nil
}

func (p *Demo) IsSetSetByte() bool {
	return p.SetByte != nil
}

func (p *Demo) IsSetSetI32() bool {
	return p.SetI32 != nil
}

func (p *Demo) IsSetListByte() bool {
	return p.ListByte != nil
}

func (p *Demo) IsSetListString() bool {
	return p.ListString != nil
}

func (p *Demo) IsSetListMapDemo() bool {
	return p.ListMapDemo != nil
}

func (p *Demo) IsSetEnum1() bool {
	return p.Enum1 != nil
}

func (p *Demo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.SET {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.SET {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Demo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Demo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Bool1 = &v
	}
	return nil
}

func (p *Demo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.Double1 = &v
	}
	return nil
}

func (p *Demo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.Byte1 = &v
	}
	return nil
}

func (p *Demo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		p.Int16 = &v
	}
	return nil
}

func (p *Demo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Int32 = &v
	}
	return nil
}

func (p *Demo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Int64 = &v
	}
	return nil
}

func (p *Demo) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.String1 = &v
	}
	return nil
}

func (p *Demo) ReadField8(iprot thrift.TProtocol) error {
	p.StructDemo = NewDemo()
	if err := p.StructDemo.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *Demo) ReadField9(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.MapStringInt32 = make(map[string]int32, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_val = v
		}

		p.MapStringInt32[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *Demo) ReadField10(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.MapStringDemo = make(map[string]*Demo, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}
		_val := NewDemo()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		p.MapStringDemo[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *Demo) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return err
	}
	p.SetByte = make([]int8, 0, size)
	for i := 0; i < size; i++ {
		var _elem int8
		if v, err := iprot.ReadByte(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.SetByte = append(p.SetByte, _elem)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return err
	}
	return nil
}

func (p *Demo) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return err
	}
	p.SetI32 = make([]int32, 0, size)
	for i := 0; i < size; i++ {
		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.SetI32 = append(p.SetI32, _elem)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return err
	}
	return nil
}

func (p *Demo) ReadField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ListByte = make([]int8, 0, size)
	for i := 0; i < size; i++ {
		var _elem int8
		if v, err := iprot.ReadByte(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.ListByte = append(p.ListByte, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *Demo) ReadField14(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ListString = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.ListString = append(p.ListString, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *Demo) ReadField15(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ListMapDemo = make([]map[int64]*Demo, 0, size)
	for i := 0; i < size; i++ {
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return err
		}
		_elem := make(map[int64]*Demo, size)
		for i := 0; i < size; i++ {
			var _key int64
			if v, err := iprot.ReadI64(); err != nil {
				return err
			} else {
				_key = v
			}
			_val := NewDemo()
			if err := _val.Read(iprot); err != nil {
				return err
			}

			_elem[_key] = _val
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return err
		}

		p.ListMapDemo = append(p.ListMapDemo, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *Demo) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := EnumType(v)
		p.Enum1 = &tmp
	}
	return nil
}

func (p *Demo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Demo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Demo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBool1() {
		if err = oprot.WriteFieldBegin("bool1", thrift.BOOL, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Bool1); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Demo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDouble1() {
		if err = oprot.WriteFieldBegin("double1", thrift.DOUBLE, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.Double1); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Demo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetByte1() {
		if err = oprot.WriteFieldBegin("byte1", thrift.BYTE, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteByte(*p.Byte1); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Demo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetInt16() {
		if err = oprot.WriteFieldBegin("int16", thrift.I16, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI16(*p.Int16); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Demo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetInt32() {
		if err = oprot.WriteFieldBegin("int32", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Int32); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Demo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetInt64() {
		if err = oprot.WriteFieldBegin("int64", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Int64); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *Demo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetString1() {
		if err = oprot.WriteFieldBegin("string1", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.String1); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *Demo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetStructDemo() {
		if err = oprot.WriteFieldBegin("struct_demo", thrift.STRUCT, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.StructDemo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *Demo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetMapStringInt32() {
		if err = oprot.WriteFieldBegin("map_string_int32", thrift.MAP, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.MapStringInt32)); err != nil {
			return err
		}
		for k, v := range p.MapStringInt32 {

			if err := oprot.WriteString(k); err != nil {
				return err
			}

			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *Demo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetMapStringDemo() {
		if err = oprot.WriteFieldBegin("map_string_demo", thrift.MAP, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.MapStringDemo)); err != nil {
			return err
		}
		for k, v := range p.MapStringDemo {

			if err := oprot.WriteString(k); err != nil {
				return err
			}

			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *Demo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetSetByte() {
		if err = oprot.WriteFieldBegin("set_byte", thrift.SET, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteSetBegin(thrift.BYTE, len(p.SetByte)); err != nil {
			return err
		}
		for i := 0; i < len(p.SetByte); i++ {
			for j := i + 1; j < len(p.SetByte); j++ {
				if func(tgt, src int8) bool {
					if tgt != src {
						return false
					}
					return true
				}(p.SetByte[i], p.SetByte[j]) {
					return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.SetByte[i]))
				}
			}
		}
		for _, v := range p.SetByte {
			if err := oprot.WriteByte(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *Demo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetSetI32() {
		if err = oprot.WriteFieldBegin("set_i32", thrift.SET, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteSetBegin(thrift.I32, len(p.SetI32)); err != nil {
			return err
		}
		for i := 0; i < len(p.SetI32); i++ {
			for j := i + 1; j < len(p.SetI32); j++ {
				if func(tgt, src int32) bool {
					if tgt != src {
						return false
					}
					return true
				}(p.SetI32[i], p.SetI32[j]) {
					return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.SetI32[i]))
				}
			}
		}
		for _, v := range p.SetI32 {
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *Demo) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetListByte() {
		if err = oprot.WriteFieldBegin("list_byte", thrift.LIST, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.BYTE, len(p.ListByte)); err != nil {
			return err
		}
		for _, v := range p.ListByte {
			if err := oprot.WriteByte(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *Demo) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetListString() {
		if err = oprot.WriteFieldBegin("list_string", thrift.LIST, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ListString)); err != nil {
			return err
		}
		for _, v := range p.ListString {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *Demo) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetListMapDemo() {
		if err = oprot.WriteFieldBegin("list_map_demo", thrift.LIST, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.MAP, len(p.ListMapDemo)); err != nil {
			return err
		}
		for _, v := range p.ListMapDemo {
			if err := oprot.WriteMapBegin(thrift.I64, thrift.STRUCT, len(v)); err != nil {
				return err
			}
			for k, v := range v {

				if err := oprot.WriteI64(k); err != nil {
					return err
				}

				if err := v.Write(oprot); err != nil {
					return err
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *Demo) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnum1() {
		if err = oprot.WriteFieldBegin("enum1", thrift.I32, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Enum1)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *Demo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Demo(%+v)", *p)
}

func (p *Demo) DeepEqual(ano *Demo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Bool1) {
		return false
	}
	if !p.Field2DeepEqual(ano.Double1) {
		return false
	}
	if !p.Field3DeepEqual(ano.Byte1) {
		return false
	}
	if !p.Field4DeepEqual(ano.Int16) {
		return false
	}
	if !p.Field5DeepEqual(ano.Int32) {
		return false
	}
	if !p.Field6DeepEqual(ano.Int64) {
		return false
	}
	if !p.Field7DeepEqual(ano.String1) {
		return false
	}
	if !p.Field8DeepEqual(ano.StructDemo) {
		return false
	}
	if !p.Field9DeepEqual(ano.MapStringInt32) {
		return false
	}
	if !p.Field10DeepEqual(ano.MapStringDemo) {
		return false
	}
	if !p.Field11DeepEqual(ano.SetByte) {
		return false
	}
	if !p.Field12DeepEqual(ano.SetI32) {
		return false
	}
	if !p.Field13DeepEqual(ano.ListByte) {
		return false
	}
	if !p.Field14DeepEqual(ano.ListString) {
		return false
	}
	if !p.Field15DeepEqual(ano.ListMapDemo) {
		return false
	}
	if !p.Field16DeepEqual(ano.Enum1) {
		return false
	}
	return true
}

func (p *Demo) Field1DeepEqual(src *bool) bool {

	if p.Bool1 == src {
		return true
	} else if p.Bool1 == nil || src == nil {
		return false
	}
	if *p.Bool1 != *src {
		return false
	}
	return true
}
func (p *Demo) Field2DeepEqual(src *float64) bool {

	if p.Double1 == src {
		return true
	} else if p.Double1 == nil || src == nil {
		return false
	}
	if *p.Double1 != *src {
		return false
	}
	return true
}
func (p *Demo) Field3DeepEqual(src *int8) bool {

	if p.Byte1 == src {
		return true
	} else if p.Byte1 == nil || src == nil {
		return false
	}
	if *p.Byte1 != *src {
		return false
	}
	return true
}
func (p *Demo) Field4DeepEqual(src *int16) bool {

	if p.Int16 == src {
		return true
	} else if p.Int16 == nil || src == nil {
		return false
	}
	if *p.Int16 != *src {
		return false
	}
	return true
}
func (p *Demo) Field5DeepEqual(src *int32) bool {

	if p.Int32 == src {
		return true
	} else if p.Int32 == nil || src == nil {
		return false
	}
	if *p.Int32 != *src {
		return false
	}
	return true
}
func (p *Demo) Field6DeepEqual(src *int64) bool {

	if p.Int64 == src {
		return true
	} else if p.Int64 == nil || src == nil {
		return false
	}
	if *p.Int64 != *src {
		return false
	}
	return true
}
func (p *Demo) Field7DeepEqual(src *string) bool {

	if p.String1 == src {
		return true
	} else if p.String1 == nil || src == nil {
		return false
	}
	if strings.Compare(*p.String1, *src) != 0 {
		return false
	}
	return true
}
func (p *Demo) Field8DeepEqual(src *Demo) bool {

	if !p.StructDemo.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Demo) Field9DeepEqual(src map[string]int32) bool {

	if len(p.MapStringInt32) != len(src) {
		return false
	}
	for k, v := range p.MapStringInt32 {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *Demo) Field10DeepEqual(src map[string]*Demo) bool {

	if len(p.MapStringDemo) != len(src) {
		return false
	}
	for k, v := range p.MapStringDemo {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *Demo) Field11DeepEqual(src []int8) bool {

	if len(p.SetByte) != len(src) {
		return false
	}
	for i, v := range p.SetByte {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *Demo) Field12DeepEqual(src []int32) bool {

	if len(p.SetI32) != len(src) {
		return false
	}
	for i, v := range p.SetI32 {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *Demo) Field13DeepEqual(src []int8) bool {

	if len(p.ListByte) != len(src) {
		return false
	}
	for i, v := range p.ListByte {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *Demo) Field14DeepEqual(src []string) bool {

	if len(p.ListString) != len(src) {
		return false
	}
	for i, v := range p.ListString {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *Demo) Field15DeepEqual(src []map[int64]*Demo) bool {

	if len(p.ListMapDemo) != len(src) {
		return false
	}
	for i, v := range p.ListMapDemo {
		_src := src[i]
		if len(v) != len(_src) {
			return false
		}
		for k, v := range v {
			_src1 := _src[k]
			if !v.DeepEqual(_src1) {
				return false
			}
		}
	}
	return true
}
func (p *Demo) Field16DeepEqual(src *EnumType) bool {

	if p.Enum1 == src {
		return true
	} else if p.Enum1 == nil || src == nil {
		return false
	}
	if *p.Enum1 != *src {
		return false
	}
	return true
}
